#!/usr/bin/env python3
"""
Clean up custom collections from _system database.

This script removes custom collections that were incorrectly created in the
_system database and moves them to a proper application database if needed.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from entity_resolution.utils.database import DatabaseManager
from entity_resolution.utils.config import Config

def main():
    print("🧹 Cleaning up _system database...")
    
    config = Config.from_env()
    db_manager = DatabaseManager()
    
    if not db_manager.test_connection():
        print("❌ Could not connect to database")
        return False
    
    # Get system database connection
    sys_db = db_manager.get_database()
    
    # Custom collections that should not be in _system database
    custom_collections = [
        'entities',
        'customers', 
        'entity_clusters',
        'similarities',
        'golden_records',
        'test_collection'
    ]
    
    print(f"🔍 Checking for custom collections in _system database...")
    
    # Check which custom collections exist
    existing_custom = []
    for col_name in custom_collections:
        if sys_db.has_collection(col_name):
            existing_custom.append(col_name)
            print(f"  ⚠️  Found custom collection: {col_name}")
    
    if not existing_custom:
        print("✅ No custom collections found in _system database")
        return True
    
    print(f"\n📊 Found {len(existing_custom)} custom collections in _system database")
    
    # Check if collections have data
    collections_with_data = []
    for col_name in existing_custom:
        try:
            col = sys_db.collection(col_name)
            count = col.count()
            if count > 0:
                collections_with_data.append((col_name, count))
                print(f"  📋 {col_name}: {count} documents")
            else:
                print(f"  📋 {col_name}: empty")
        except Exception as e:
            print(f"  ❌ Error checking {col_name}: {e}")
    
    if collections_with_data:
        print(f"\n⚠️  WARNING: {len(collections_with_data)} collections contain data!")
        print("   These collections should be backed up before deletion.")
        
        # Ask user if they want to proceed
        response = input("\n🤔 Do you want to delete these collections? (yes/no): ").lower().strip()
        if response not in ['yes', 'y']:
            print("❌ Operation cancelled by user")
            return False
    
    # Delete custom collections from _system database
    print(f"\n🗑️  Deleting custom collections from _system database...")
    
    deleted_count = 0
    for col_name in existing_custom:
        try:
            if sys_db.has_collection(col_name):
                sys_db.delete_collection(col_name)
                print(f"  ✅ Deleted: {col_name}")
                deleted_count += 1
            else:
                print(f"  ℹ️  Already deleted: {col_name}")
        except Exception as e:
            print(f"  ❌ Error deleting {col_name}: {e}")
    
    print(f"\n🎉 Successfully deleted {deleted_count} custom collections from _system database")
    
    # Verify cleanup
    print(f"\n🔍 Verifying cleanup...")
    remaining_custom = []
    for col_name in custom_collections:
        if sys_db.has_collection(col_name):
            remaining_custom.append(col_name)
    
    if remaining_custom:
        print(f"⚠️  Warning: {len(remaining_custom)} collections still exist:")
        for col in remaining_custom:
            print(f"  - {col}")
    else:
        print("✅ All custom collections successfully removed from _system database")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n🎉 Database cleanup completed successfully!")
        else:
            print("\n❌ Database cleanup failed!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n❌ Operation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        sys.exit(1)
